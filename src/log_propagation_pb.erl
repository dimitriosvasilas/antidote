%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(log_propagation_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type sub_request() ::
      #{timestamp               => integer()        % = 1, 32 bits
       }.

-type state_delta() ::
      #{old                     => crdt_map_state(), % = 1
        new                     => crdt_map_state() % = 2
       }.

-type payload() ::
      #{val                     => {delta, state_delta()} | {op, operation()} % oneof
       }.

-type log_operation() ::
      #{dc_ID                   => iodata(),        % = 1
        partition_ID            => iodata(),        % = 2
        key                     => iodata(),        % = 3
        bucket                  => iodata(),        % = 4
        crdt_type               => iodata(),        % = 5
        commit_time             => integer(),       % = 6, 32 bits
        payload                 => payload()        % = 7
       }.

-type map_state() ::
      #{object                  => crdt_key_type(), % = 1
        value                   => crdt_value()     % = 2
       }.

-type crdt_map_state() ::
      #{state                   => [map_state()]    % = 1
       }.

-type op() ::
      #{object                  => crdt_key_type(), % = 1
        update                  => update()         % = 2
       }.

-type operation() ::
      #{op                      => [op()]           % = 1
       }.

-type crdt_key_type() ::
      #{key                     => iodata(),        % = 1
        type                    => iodata()         % = 2
       }.

-type crdt_value() ::
      #{val                     => {str, iodata()} | {int, integer()} % oneof
       }.

-type update() ::
      #{op_type                 => iodata(),        % = 1
        value                   => crdt_value()     % = 2
       }.

-export_type(['sub_request'/0, 'state_delta'/0, 'payload'/0, 'log_operation'/0, 'map_state'/0, 'crdt_map_state'/0, 'op'/0, 'operation'/0, 'crdt_key_type'/0, 'crdt_value'/0, 'update'/0]).

-spec encode_msg(sub_request() | state_delta() | payload() | log_operation() | map_state() | crdt_map_state() | op() | operation() | crdt_key_type() | crdt_value() | update(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(sub_request() | state_delta() | payload() | log_operation() | map_state() | crdt_map_state() | op() | operation() | crdt_key_type() | crdt_value() | update(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      sub_request ->
	  encode_msg_sub_request(id(Msg, TrUserData), TrUserData);
      state_delta ->
	  encode_msg_state_delta(id(Msg, TrUserData), TrUserData);
      payload ->
	  encode_msg_payload(id(Msg, TrUserData), TrUserData);
      log_operation ->
	  encode_msg_log_operation(id(Msg, TrUserData),
				   TrUserData);
      map_state ->
	  encode_msg_map_state(id(Msg, TrUserData), TrUserData);
      crdt_map_state ->
	  encode_msg_crdt_map_state(id(Msg, TrUserData),
				    TrUserData);
      op -> encode_msg_op(id(Msg, TrUserData), TrUserData);
      operation ->
	  encode_msg_operation(id(Msg, TrUserData), TrUserData);
      crdt_key_type ->
	  encode_msg_crdt_key_type(id(Msg, TrUserData),
				   TrUserData);
      crdt_value ->
	  encode_msg_crdt_value(id(Msg, TrUserData), TrUserData);
      update ->
	  encode_msg_update(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_sub_request(Msg, TrUserData) ->
    encode_msg_sub_request(Msg, <<>>, TrUserData).


encode_msg_sub_request(#{} = M, Bin, TrUserData) ->
    case M of
      #{timestamp := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_state_delta(Msg, TrUserData) ->
    encode_msg_state_delta(Msg, <<>>, TrUserData).


encode_msg_state_delta(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{old := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_state_delta_old(TrF1, <<Bin/binary, 10>>,
						 TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{new := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_state_delta_new(TrF2, <<B1/binary, 18>>,
					    TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_payload(Msg, TrUserData) ->
    encode_msg_payload(Msg, <<>>, TrUserData).


encode_msg_payload(#{} = M, Bin, TrUserData) ->
    case M of
      #{val := F1} ->
	  case id(F1, TrUserData) of
	    {delta, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_payload_delta(TrTF1, <<Bin/binary, 10>>,
					 TrUserData)
		end;
	    {op, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_payload_op(TrTF1, <<Bin/binary, 18>>,
				      TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_log_operation(Msg, TrUserData) ->
    encode_msg_log_operation(Msg, <<>>, TrUserData).


encode_msg_log_operation(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{dc_ID := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{partition_ID := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{key := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case is_empty_string(TrF3) of
		   true -> B2;
		   false ->
		       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{bucket := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 case is_empty_string(TrF4) of
		   true -> B3;
		   false ->
		       e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{crdt_type := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 case is_empty_string(TrF5) of
		   true -> B4;
		   false ->
		       e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{commit_time := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 0 -> B5;
		    true ->
			e_type_int64(TrF6, <<B5/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    case M of
      #{payload := F7} ->
	  begin
	    TrF7 = id(F7, TrUserData),
	    if TrF7 =:= undefined -> B6;
	       true ->
		   e_mfield_log_operation_payload(TrF7, <<B6/binary, 58>>,
						  TrUserData)
	    end
	  end;
      _ -> B6
    end.

encode_msg_map_state(Msg, TrUserData) ->
    encode_msg_map_state(Msg, <<>>, TrUserData).


encode_msg_map_state(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{object := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_map_state_object(TrF1, <<Bin/binary, 10>>,
						  TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_map_state_value(TrF2, <<B1/binary, 18>>,
					    TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_crdt_map_state(Msg, TrUserData) ->
    encode_msg_crdt_map_state(Msg, <<>>, TrUserData).


encode_msg_crdt_map_state(#{} = M, Bin, TrUserData) ->
    case M of
      #{state := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_crdt_map_state_state(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_op(Msg, TrUserData) ->
    encode_msg_op(Msg, <<>>, TrUserData).


encode_msg_op(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{object := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_op_object(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{update := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_op_update(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_operation(Msg, TrUserData) ->
    encode_msg_operation(Msg, <<>>, TrUserData).


encode_msg_operation(#{} = M, Bin, TrUserData) ->
    case M of
      #{op := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_operation_op(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_crdt_key_type(Msg, TrUserData) ->
    encode_msg_crdt_key_type(Msg, <<>>, TrUserData).


encode_msg_crdt_key_type(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{type := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_crdt_value(Msg, TrUserData) ->
    encode_msg_crdt_value(Msg, <<>>, TrUserData).


encode_msg_crdt_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{val := F1} ->
	  case id(F1, TrUserData) of
	    {str, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_string(TrTF1, <<Bin/binary, 10>>, TrUserData)
		end;
	    {int, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_int64(TrTF1, <<Bin/binary, 16>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_update(Msg, TrUserData) ->
    encode_msg_update(Msg, <<>>, TrUserData).


encode_msg_update(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{op_type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_update_value(TrF2, <<B1/binary, 18>>,
					 TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_mfield_state_delta_old(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_crdt_map_state(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_state_delta_new(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_crdt_map_state(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_payload_delta(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_state_delta(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_payload_op(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_operation(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_log_operation_payload(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_payload(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_map_state_object(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_crdt_key_type(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_map_state_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_crdt_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_crdt_map_state_state(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_map_state(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_crdt_map_state_state([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_crdt_map_state_state(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_crdt_map_state_state(Rest, Bin3, TrUserData);
e_field_crdt_map_state_state([], Bin, _TrUserData) ->
    Bin.

e_mfield_op_object(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_crdt_key_type(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_op_update(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_update(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_operation_op(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_op(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_operation_op([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_operation_op(id(Elem, TrUserData), Bin2,
				 TrUserData),
    e_field_operation_op(Rest, Bin3, TrUserData);
e_field_operation_op([], Bin, _TrUserData) -> Bin.

e_mfield_update_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_crdt_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(sub_request, Bin, TrUserData) ->
    id(decode_msg_sub_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(state_delta, Bin, TrUserData) ->
    id(decode_msg_state_delta(Bin, TrUserData), TrUserData);
decode_msg_2_doit(payload, Bin, TrUserData) ->
    id(decode_msg_payload(Bin, TrUserData), TrUserData);
decode_msg_2_doit(log_operation, Bin, TrUserData) ->
    id(decode_msg_log_operation(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(map_state, Bin, TrUserData) ->
    id(decode_msg_map_state(Bin, TrUserData), TrUserData);
decode_msg_2_doit(crdt_map_state, Bin, TrUserData) ->
    id(decode_msg_crdt_map_state(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(op, Bin, TrUserData) ->
    id(decode_msg_op(Bin, TrUserData), TrUserData);
decode_msg_2_doit(operation, Bin, TrUserData) ->
    id(decode_msg_operation(Bin, TrUserData), TrUserData);
decode_msg_2_doit(crdt_key_type, Bin, TrUserData) ->
    id(decode_msg_crdt_key_type(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(crdt_value, Bin, TrUserData) ->
    id(decode_msg_crdt_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(update, Bin, TrUserData) ->
    id(decode_msg_update(Bin, TrUserData), TrUserData).



decode_msg_sub_request(Bin, TrUserData) ->
    dfp_read_field_def_sub_request(Bin, 0, 0,
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_sub_request(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_sub_request_timestamp(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_sub_request(<<>>, 0, 0, F@_1, _) ->
    #{timestamp => F@_1};
dfp_read_field_def_sub_request(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_sub_request(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_sub_request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sub_request(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_sub_request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sub_request_timestamp(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sub_request(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_sub_request(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_sub_request(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_sub_request(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_sub_request(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_sub_request(<<>>, 0, 0, F@_1, _) ->
    #{timestamp => F@_1}.

d_field_sub_request_timestamp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_sub_request_timestamp(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_sub_request_timestamp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_sub_request(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_sub_request(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_sub_request(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sub_request(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_sub_request(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_sub_request(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_sub_request(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sub_request(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sub_request(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_sub_request(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sub_request(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_sub_request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_sub_request(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_sub_request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_sub_request(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_state_delta(Bin, TrUserData) ->
    dfp_read_field_def_state_delta(Bin, 0, 0,
				   id('$undef', TrUserData),
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_state_delta(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_state_delta_old(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_state_delta(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_state_delta_new(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_state_delta(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{old => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{new => F@_2}
    end;
dfp_read_field_def_state_delta(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_state_delta(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_state_delta(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_state_delta(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_state_delta(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_state_delta_old(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      18 ->
	  d_field_state_delta_new(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_state_delta(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_state_delta(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_state_delta(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_state_delta(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_state_delta(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_state_delta(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{old => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{new => F@_2}
    end.

d_field_state_delta_old(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_state_delta_old(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_state_delta_old(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_crdt_map_state(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_state_delta(RestF, 0, 0,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_crdt_map_state(Prev,
								   NewFValue,
								   TrUserData)
				   end,
				   F@_2, TrUserData).

d_field_state_delta_new(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_state_delta_new(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_state_delta_new(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_crdt_map_state(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_state_delta(RestF, 0, 0, F@_1,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_crdt_map_state(Prev,
								   NewFValue,
								   TrUserData)
				   end,
				   TrUserData).

skip_varint_state_delta(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_state_delta(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_state_delta(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_state_delta(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_state_delta(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_state_delta(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_state_delta(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_state_delta(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_state_delta(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_state_delta(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_state_delta(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_state_delta(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_state_delta(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_state_delta(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_payload(Bin, TrUserData) ->
    dfp_read_field_def_payload(Bin, 0, 0,
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_payload(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_payload_delta(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_payload(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_payload_op(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_payload(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{val => F@_1}
    end;
dfp_read_field_def_payload(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_payload(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_payload(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_payload(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_payload(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_payload_delta(Rest, 0, 0, F@_1, TrUserData);
      18 -> d_field_payload_op(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_payload(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_payload(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_payload(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_payload(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_payload(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_payload(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{val => F@_1}
    end.

d_field_payload_delta(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_payload_delta(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_payload_delta(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_state_delta(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_payload(RestF, 0, 0,
			       case Prev of
				 '$undef' -> id({delta, NewFValue}, TrUserData);
				 {delta, MVPrev} ->
				     id({delta,
					 merge_msg_state_delta(MVPrev,
							       NewFValue,
							       TrUserData)},
					TrUserData);
				 _ -> id({delta, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_payload_op(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, TrUserData)
    when N < 57 ->
    d_field_payload_op(Rest, N + 7, X bsl N + Acc, F@_1,
		       TrUserData);
d_field_payload_op(<<0:1, X:7, Rest/binary>>, N, Acc,
		   Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_operation(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_payload(RestF, 0, 0,
			       case Prev of
				 '$undef' -> id({op, NewFValue}, TrUserData);
				 {op, MVPrev} ->
				     id({op,
					 merge_msg_operation(MVPrev, NewFValue,
							     TrUserData)},
					TrUserData);
				 _ -> id({op, NewFValue}, TrUserData)
			       end,
			       TrUserData).

skip_varint_payload(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_payload(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_payload(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_payload(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_payload(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_payload(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_payload(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_payload(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_payload(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_payload(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_payload(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_payload(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_payload(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_payload(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_log_operation(Bin, TrUserData) ->
    dfp_read_field_def_log_operation(Bin, 0, 0,
				     id(<<>>, TrUserData), id(<<>>, TrUserData),
				     id(<<>>, TrUserData), id(<<>>, TrUserData),
				     id(<<>>, TrUserData), id(0, TrUserData),
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_log_operation(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    d_field_log_operation_dc_ID(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_log_operation(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    d_field_log_operation_partition_ID(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
dfp_read_field_def_log_operation(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    d_field_log_operation_key(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_log_operation(<<34, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    d_field_log_operation_bucket(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_log_operation(<<42, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    d_field_log_operation_crdt_type(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData);
dfp_read_field_def_log_operation(<<48, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    d_field_log_operation_commit_time(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData);
dfp_read_field_def_log_operation(<<58, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    d_field_log_operation_payload(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_log_operation(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{dc_ID => F@_1, partition_ID => F@_2, key => F@_3,
	   bucket => F@_4, crdt_type => F@_5, commit_time => F@_6},
    if F@_7 == '$undef' -> S1;
       true -> S1#{payload => F@_7}
    end;
dfp_read_field_def_log_operation(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData) ->
    dg_read_field_def_log_operation(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

dg_read_field_def_log_operation(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_log_operation(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
dg_read_field_def_log_operation(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_log_operation_dc_ID(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_log_operation_partition_ID(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
      26 ->
	  d_field_log_operation_key(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      34 ->
	  d_field_log_operation_bucket(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
      42 ->
	  d_field_log_operation_crdt_type(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData);
      48 ->
	  d_field_log_operation_commit_time(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    TrUserData);
      58 ->
	  d_field_log_operation_payload(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_log_operation(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_log_operation(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_log_operation(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, TrUserData);
	    3 ->
		skip_group_log_operation(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
	    5 ->
		skip_32_log_operation(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_log_operation(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{dc_ID => F@_1, partition_ID => F@_2, key => F@_3,
	   bucket => F@_4, crdt_type => F@_5, commit_time => F@_6},
    if F@_7 == '$undef' -> S1;
       true -> S1#{payload => F@_7}
    end.

d_field_log_operation_dc_ID(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    d_field_log_operation_dc_ID(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
d_field_log_operation_dc_ID(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_log_operation(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData).

d_field_log_operation_partition_ID(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData)
    when N < 57 ->
    d_field_log_operation_partition_ID(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, TrUserData);
d_field_log_operation_partition_ID(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_log_operation(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData).

d_field_log_operation_key(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_log_operation_key(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_log_operation_key(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_log_operation(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7,
				     TrUserData).

d_field_log_operation_bucket(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    d_field_log_operation_bucket(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
d_field_log_operation_bucket(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_log_operation(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7,
				     TrUserData).

d_field_log_operation_crdt_type(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    d_field_log_operation_crdt_type(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
d_field_log_operation_crdt_type(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_log_operation(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7,
				     TrUserData).

d_field_log_operation_commit_time(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData)
    when N < 57 ->
    d_field_log_operation_commit_time(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, TrUserData);
d_field_log_operation_commit_time(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_log_operation(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7,
				     TrUserData).

d_field_log_operation_payload(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 57 ->
    d_field_log_operation_payload(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
d_field_log_operation_payload(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_payload(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_log_operation(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_payload(Prev, NewFValue,
							      TrUserData)
				     end,
				     TrUserData).

skip_varint_log_operation(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    skip_varint_log_operation(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_log_operation(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    dfp_read_field_def_log_operation(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData).

skip_length_delimited_log_operation(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_log_operation(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_log_operation(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_log_operation(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData).

skip_group_log_operation(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_log_operation(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData).

skip_32_log_operation(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_log_operation(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData).

skip_64_log_operation(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_log_operation(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData).

decode_msg_map_state(Bin, TrUserData) ->
    dfp_read_field_def_map_state(Bin, 0, 0,
				 id('$undef', TrUserData),
				 id('$undef', TrUserData), TrUserData).

dfp_read_field_def_map_state(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_map_state_object(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_map_state(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_map_state_value(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_map_state(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{object => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{value => F@_2}
    end;
dfp_read_field_def_map_state(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_map_state(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_map_state(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_map_state(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_map_state(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_map_state_object(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      18 ->
	  d_field_map_state_value(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_map_state(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_map_state(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_map_state(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_map_state(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_map_state(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_map_state(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{object => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{value => F@_2}
    end.

d_field_map_state_object(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_map_state_object(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_map_state_object(<<0:1, X:7, Rest/binary>>, N,
			 Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_crdt_key_type(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_map_state(RestF, 0, 0,
				 if Prev == '$undef' -> NewFValue;
				    true ->
					merge_msg_crdt_key_type(Prev, NewFValue,
								TrUserData)
				 end,
				 F@_2, TrUserData).

d_field_map_state_value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_map_state_value(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_map_state_value(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_crdt_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_map_state(RestF, 0, 0, F@_1,
				 if Prev == '$undef' -> NewFValue;
				    true ->
					merge_msg_crdt_value(Prev, NewFValue,
							     TrUserData)
				 end,
				 TrUserData).

skip_varint_map_state(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_map_state(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_map_state(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_map_state(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_map_state(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_map_state(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_map_state(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_map_state(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_map_state(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_map_state(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_map_state(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_map_state(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_map_state(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_map_state(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_crdt_map_state(Bin, TrUserData) ->
    dfp_read_field_def_crdt_map_state(Bin, 0, 0,
				      id([], TrUserData), TrUserData).

dfp_read_field_def_crdt_map_state(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_crdt_map_state_state(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_crdt_map_state(<<>>, 0, 0, R1,
				  TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{state => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_crdt_map_state(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_crdt_map_state(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_crdt_map_state(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_crdt_map_state(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_crdt_map_state(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_crdt_map_state_state(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_crdt_map_state(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_crdt_map_state(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_crdt_map_state(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_crdt_map_state(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_crdt_map_state(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_crdt_map_state(<<>>, 0, 0, R1,
				 TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{state => lists_reverse(R1, TrUserData)}
    end.

d_field_crdt_map_state_state(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_crdt_map_state_state(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_crdt_map_state_state(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_map_state(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_crdt_map_state(RestF, 0, 0,
				      cons(NewFValue, Prev, TrUserData),
				      TrUserData).

skip_varint_crdt_map_state(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_crdt_map_state(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_crdt_map_state(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_crdt_map_state(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_crdt_map_state(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_crdt_map_state(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_crdt_map_state(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_crdt_map_state(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_crdt_map_state(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_crdt_map_state(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_crdt_map_state(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_crdt_map_state(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_crdt_map_state(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_crdt_map_state(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_op(Bin, TrUserData) ->
    dfp_read_field_def_op(Bin, 0, 0,
			  id('$undef', TrUserData), id('$undef', TrUserData),
			  TrUserData).

dfp_read_field_def_op(<<10, Rest/binary>>, Z1, Z2, F@_1,
		      F@_2, TrUserData) ->
    d_field_op_object(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_op(<<18, Rest/binary>>, Z1, Z2, F@_1,
		      F@_2, TrUserData) ->
    d_field_op_update(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_op(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{object => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{update => F@_2}
    end;
dfp_read_field_def_op(Other, Z1, Z2, F@_1, F@_2,
		      TrUserData) ->
    dg_read_field_def_op(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData).

dg_read_field_def_op(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_op(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
dg_read_field_def_op(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_op_object(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_op_update(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_op(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_op(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_op(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    3 ->
		skip_group_op(Rest, Key bsr 3, 0, F@_1, F@_2,
			      TrUserData);
	    5 -> skip_32_op(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_op(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{object => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{update => F@_2}
    end.

d_field_op_object(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_op_object(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_op_object(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_crdt_key_type(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_op(RestF, 0, 0,
			  if Prev == '$undef' -> NewFValue;
			     true ->
				 merge_msg_crdt_key_type(Prev, NewFValue,
							 TrUserData)
			  end,
			  F@_2, TrUserData).

d_field_op_update(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_op_update(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_op_update(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_update(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_op(RestF, 0, 0, F@_1,
			  if Prev == '$undef' -> NewFValue;
			     true ->
				 merge_msg_update(Prev, NewFValue, TrUserData)
			  end,
			  TrUserData).

skip_varint_op(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    skip_varint_op(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_op(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_op(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData).

skip_length_delimited_op(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_op(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
skip_length_delimited_op(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_op(Rest2, 0, 0, F@_1, F@_2,
			  TrUserData).

skip_group_op(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_op(Rest, 0, Z2, F@_1, F@_2,
			  TrUserData).

skip_32_op(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	   TrUserData) ->
    dfp_read_field_def_op(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData).

skip_64_op(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	   TrUserData) ->
    dfp_read_field_def_op(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData).

decode_msg_operation(Bin, TrUserData) ->
    dfp_read_field_def_operation(Bin, 0, 0,
				 id([], TrUserData), TrUserData).

dfp_read_field_def_operation(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_operation_op(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_operation(<<>>, 0, 0, R1,
			     TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{op => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_operation(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_operation(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_operation(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_operation(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_operation(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_operation_op(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_operation(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_operation(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_operation(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_operation(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_operation(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_operation(<<>>, 0, 0, R1,
			    TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{op => lists_reverse(R1, TrUserData)}
    end.

d_field_operation_op(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, TrUserData)
    when N < 57 ->
    d_field_operation_op(Rest, N + 7, X bsl N + Acc, F@_1,
			 TrUserData);
d_field_operation_op(<<0:1, X:7, Rest/binary>>, N, Acc,
		     Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_op(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_operation(RestF, 0, 0,
				 cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_operation(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_operation(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_operation(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_operation(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_operation(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_operation(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_operation(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_operation(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_operation(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_operation(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_operation(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_operation(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_operation(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_operation(Rest, Z1, Z2, F@_1,
				 TrUserData).

decode_msg_crdt_key_type(Bin, TrUserData) ->
    dfp_read_field_def_crdt_key_type(Bin, 0, 0,
				     id(<<>>, TrUserData), id(<<>>, TrUserData),
				     TrUserData).

dfp_read_field_def_crdt_key_type(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_crdt_key_type_key(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_crdt_key_type(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_crdt_key_type_type(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_crdt_key_type(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #{key => F@_1, type => F@_2};
dfp_read_field_def_crdt_key_type(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_crdt_key_type(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_crdt_key_type(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_crdt_key_type(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_crdt_key_type(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_crdt_key_type_key(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_crdt_key_type_type(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_crdt_key_type(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_crdt_key_type(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_crdt_key_type(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_crdt_key_type(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_crdt_key_type(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_crdt_key_type(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #{key => F@_1, type => F@_2}.

d_field_crdt_key_type_key(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_crdt_key_type_key(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_crdt_key_type_key(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_crdt_key_type(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_crdt_key_type_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_crdt_key_type_type(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_crdt_key_type_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_crdt_key_type(RestF, 0, 0, F@_1,
				     NewFValue, TrUserData).

skip_varint_crdt_key_type(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_crdt_key_type(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_crdt_key_type(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_crdt_key_type(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_crdt_key_type(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_crdt_key_type(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_crdt_key_type(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_crdt_key_type(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_crdt_key_type(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_crdt_key_type(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_crdt_key_type(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_crdt_key_type(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_crdt_key_type(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_crdt_key_type(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_crdt_value(Bin, TrUserData) ->
    dfp_read_field_def_crdt_value(Bin, 0, 0,
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_crdt_value(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_crdt_value_str(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_crdt_value(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_crdt_value_int(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_crdt_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{val => F@_1}
    end;
dfp_read_field_def_crdt_value(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_crdt_value(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_crdt_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_crdt_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_crdt_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_crdt_value_str(Rest, 0, 0, F@_1, TrUserData);
      16 ->
	  d_field_crdt_value_int(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_crdt_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_crdt_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_crdt_value(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_crdt_value(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_crdt_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_crdt_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{val => F@_1}
    end.

d_field_crdt_value_str(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_crdt_value_str(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_crdt_value_str(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_crdt_value(RestF, 0, 0,
				  id({str, NewFValue}, TrUserData), TrUserData).

d_field_crdt_value_int(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_crdt_value_int(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_crdt_value_int(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_crdt_value(RestF, 0, 0,
				  id({int, NewFValue}, TrUserData), TrUserData).

skip_varint_crdt_value(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_crdt_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_crdt_value(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_crdt_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_crdt_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_crdt_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_crdt_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_crdt_value(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_crdt_value(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_crdt_value(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_crdt_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_crdt_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_crdt_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_crdt_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_update(Bin, TrUserData) ->
    dfp_read_field_def_update(Bin, 0, 0,
			      id(<<>>, TrUserData), id('$undef', TrUserData),
			      TrUserData).

dfp_read_field_def_update(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_update_op_type(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_update(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_update_value(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_update(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{op_type => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
dfp_read_field_def_update(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_update(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_update(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_update(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_update(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_update_op_type(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_update_value(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_update(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_update(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_update(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_update(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_update(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_update(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{op_type => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

d_field_update_op_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_update_op_type(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_update_op_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_update(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_update_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_update_value(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_update_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_crdt_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_update(RestF, 0, 0, F@_1,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_crdt_value(Prev, NewFValue,
							  TrUserData)
			      end,
			      TrUserData).

skip_varint_update(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_update(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_update(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_update(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_update(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_update(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_update(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_update(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_update(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_update(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_update(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_update(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_update(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_update(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      sub_request ->
	  merge_msg_sub_request(Prev, New, TrUserData);
      state_delta ->
	  merge_msg_state_delta(Prev, New, TrUserData);
      payload -> merge_msg_payload(Prev, New, TrUserData);
      log_operation ->
	  merge_msg_log_operation(Prev, New, TrUserData);
      map_state -> merge_msg_map_state(Prev, New, TrUserData);
      crdt_map_state ->
	  merge_msg_crdt_map_state(Prev, New, TrUserData);
      op -> merge_msg_op(Prev, New, TrUserData);
      operation -> merge_msg_operation(Prev, New, TrUserData);
      crdt_key_type ->
	  merge_msg_crdt_key_type(Prev, New, TrUserData);
      crdt_value ->
	  merge_msg_crdt_value(Prev, New, TrUserData);
      update -> merge_msg_update(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_sub_request/3}).
merge_msg_sub_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{timestamp := NFtimestamp}} ->
	  S1#{timestamp => NFtimestamp};
      {#{timestamp := PFtimestamp}, _} ->
	  S1#{timestamp => PFtimestamp};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_state_delta/3}).
merge_msg_state_delta(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{old := PFold}, #{old := NFold}} ->
	       S1#{old =>
		       merge_msg_crdt_map_state(PFold, NFold, TrUserData)};
	   {_, #{old := NFold}} -> S1#{old => NFold};
	   {#{old := PFold}, _} -> S1#{old => PFold};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{new := PFnew}, #{new := NFnew}} ->
	  S2#{new =>
		  merge_msg_crdt_map_state(PFnew, NFnew, TrUserData)};
      {_, #{new := NFnew}} -> S2#{new => NFnew};
      {#{new := PFnew}, _} -> S2#{new => PFnew};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_payload/3}).
merge_msg_payload(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{val := {delta, OPFval}},
       #{val := {delta, ONFval}}} ->
	  S1#{val =>
		  {delta,
		   merge_msg_state_delta(OPFval, ONFval, TrUserData)}};
      {#{val := {op, OPFval}}, #{val := {op, ONFval}}} ->
	  S1#{val =>
		  {op, merge_msg_operation(OPFval, ONFval, TrUserData)}};
      {_, #{val := NFval}} -> S1#{val => NFval};
      {#{val := PFval}, _} -> S1#{val => PFval};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_log_operation/3}).
merge_msg_log_operation(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{dc_ID := NFdc_ID}} -> S1#{dc_ID => NFdc_ID};
	   {#{dc_ID := PFdc_ID}, _} -> S1#{dc_ID => PFdc_ID};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{partition_ID := NFpartition_ID}} ->
	       S2#{partition_ID => NFpartition_ID};
	   {#{partition_ID := PFpartition_ID}, _} ->
	       S2#{partition_ID => PFpartition_ID};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S3#{key => NFkey};
	   {#{key := PFkey}, _} -> S3#{key => PFkey};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{bucket := NFbucket}} -> S4#{bucket => NFbucket};
	   {#{bucket := PFbucket}, _} -> S4#{bucket => PFbucket};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{crdt_type := NFcrdt_type}} ->
	       S5#{crdt_type => NFcrdt_type};
	   {#{crdt_type := PFcrdt_type}, _} ->
	       S5#{crdt_type => PFcrdt_type};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{commit_time := NFcommit_time}} ->
	       S6#{commit_time => NFcommit_time};
	   {#{commit_time := PFcommit_time}, _} ->
	       S6#{commit_time => PFcommit_time};
	   _ -> S6
	 end,
    case {PMsg, NMsg} of
      {#{payload := PFpayload}, #{payload := NFpayload}} ->
	  S7#{payload =>
		  merge_msg_payload(PFpayload, NFpayload, TrUserData)};
      {_, #{payload := NFpayload}} ->
	  S7#{payload => NFpayload};
      {#{payload := PFpayload}, _} ->
	  S7#{payload => PFpayload};
      {_, _} -> S7
    end.

-compile({nowarn_unused_function,merge_msg_map_state/3}).
merge_msg_map_state(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{object := PFobject}, #{object := NFobject}} ->
	       S1#{object =>
		       merge_msg_crdt_key_type(PFobject, NFobject,
					       TrUserData)};
	   {_, #{object := NFobject}} -> S1#{object => NFobject};
	   {#{object := PFobject}, _} -> S1#{object => PFobject};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{value := PFvalue}, #{value := NFvalue}} ->
	  S2#{value =>
		  merge_msg_crdt_value(PFvalue, NFvalue, TrUserData)};
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_crdt_map_state/3}).
merge_msg_crdt_map_state(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{state := PFstate}, #{state := NFstate}} ->
	  S1#{state => 'erlang_++'(PFstate, NFstate, TrUserData)};
      {_, #{state := NFstate}} -> S1#{state => NFstate};
      {#{state := PFstate}, _} -> S1#{state => PFstate};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_op/3}).
merge_msg_op(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{object := PFobject}, #{object := NFobject}} ->
	       S1#{object =>
		       merge_msg_crdt_key_type(PFobject, NFobject,
					       TrUserData)};
	   {_, #{object := NFobject}} -> S1#{object => NFobject};
	   {#{object := PFobject}, _} -> S1#{object => PFobject};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{update := PFupdate}, #{update := NFupdate}} ->
	  S2#{update =>
		  merge_msg_update(PFupdate, NFupdate, TrUserData)};
      {_, #{update := NFupdate}} -> S2#{update => NFupdate};
      {#{update := PFupdate}, _} -> S2#{update => PFupdate};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_operation/3}).
merge_msg_operation(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{op := PFop}, #{op := NFop}} ->
	  S1#{op => 'erlang_++'(PFop, NFop, TrUserData)};
      {_, #{op := NFop}} -> S1#{op => NFop};
      {#{op := PFop}, _} -> S1#{op => PFop};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_crdt_key_type/3}).
merge_msg_crdt_key_type(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{type := NFtype}} -> S2#{type => NFtype};
      {#{type := PFtype}, _} -> S2#{type => PFtype};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_crdt_value/3}).
merge_msg_crdt_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{val := NFval}} -> S1#{val => NFval};
      {#{val := PFval}, _} -> S1#{val => PFval};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_update/3}).
merge_msg_update(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{op_type := NFop_type}} ->
	       S1#{op_type => NFop_type};
	   {#{op_type := PFop_type}, _} ->
	       S1#{op_type => PFop_type};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{value := PFvalue}, #{value := NFvalue}} ->
	  S2#{value =>
		  merge_msg_crdt_value(PFvalue, NFvalue, TrUserData)};
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      {_, _} -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      sub_request ->
	  v_msg_sub_request(Msg, [MsgName], TrUserData);
      state_delta ->
	  v_msg_state_delta(Msg, [MsgName], TrUserData);
      payload -> v_msg_payload(Msg, [MsgName], TrUserData);
      log_operation ->
	  v_msg_log_operation(Msg, [MsgName], TrUserData);
      map_state ->
	  v_msg_map_state(Msg, [MsgName], TrUserData);
      crdt_map_state ->
	  v_msg_crdt_map_state(Msg, [MsgName], TrUserData);
      op -> v_msg_op(Msg, [MsgName], TrUserData);
      operation ->
	  v_msg_operation(Msg, [MsgName], TrUserData);
      crdt_key_type ->
	  v_msg_crdt_key_type(Msg, [MsgName], TrUserData);
      crdt_value ->
	  v_msg_crdt_value(Msg, [MsgName], TrUserData);
      update -> v_msg_update(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_sub_request/3}).
-dialyzer({nowarn_function,v_msg_sub_request/3}).
v_msg_sub_request(#{} = M, Path, TrUserData) ->
    case M of
      #{timestamp := F1} ->
	  v_type_int64(F1, [timestamp | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (timestamp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_sub_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   sub_request},
		  M, Path);
v_msg_sub_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, sub_request}, X, Path).

-compile({nowarn_unused_function,v_msg_state_delta/3}).
-dialyzer({nowarn_function,v_msg_state_delta/3}).
v_msg_state_delta(#{} = M, Path, TrUserData) ->
    case M of
      #{old := F1} ->
	  v_msg_crdt_map_state(F1, [old | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{new := F2} ->
	  v_msg_crdt_map_state(F2, [new | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (old) -> ok;
		      (new) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_state_delta(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   state_delta},
		  M, Path);
v_msg_state_delta(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, state_delta}, X, Path).

-compile({nowarn_unused_function,v_msg_payload/3}).
-dialyzer({nowarn_function,v_msg_payload/3}).
v_msg_payload(#{} = M, Path, TrUserData) ->
    case M of
      #{val := {delta, OF1}} ->
	  v_msg_state_delta(OF1, [delta, val | Path], TrUserData);
      #{val := {op, OF1}} ->
	  v_msg_operation(OF1, [op, val | Path], TrUserData);
      #{val := F1} ->
	  mk_type_error(invalid_oneof, F1, [val | Path]);
      _ -> ok
    end,
    lists:foreach(fun (val) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_payload(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   payload},
		  M, Path);
v_msg_payload(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, payload}, X, Path).

-compile({nowarn_unused_function,v_msg_log_operation/3}).
-dialyzer({nowarn_function,v_msg_log_operation/3}).
v_msg_log_operation(#{} = M, Path, TrUserData) ->
    case M of
      #{dc_ID := F1} ->
	  v_type_string(F1, [dc_ID | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{partition_ID := F2} ->
	  v_type_string(F2, [partition_ID | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{key := F3} ->
	  v_type_string(F3, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{bucket := F4} ->
	  v_type_string(F4, [bucket | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{crdt_type := F5} ->
	  v_type_string(F5, [crdt_type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{commit_time := F6} ->
	  v_type_int64(F6, [commit_time | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{payload := F7} ->
	  v_msg_payload(F7, [payload | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (dc_ID) -> ok;
		      (partition_ID) -> ok;
		      (key) -> ok;
		      (bucket) -> ok;
		      (crdt_type) -> ok;
		      (commit_time) -> ok;
		      (payload) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_log_operation(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   log_operation},
		  M, Path);
v_msg_log_operation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, log_operation}, X, Path).

-compile({nowarn_unused_function,v_msg_map_state/3}).
-dialyzer({nowarn_function,v_msg_map_state/3}).
v_msg_map_state(#{} = M, Path, TrUserData) ->
    case M of
      #{object := F1} ->
	  v_msg_crdt_key_type(F1, [object | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_msg_crdt_value(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (object) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_map_state(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   map_state},
		  M, Path);
v_msg_map_state(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, map_state}, X, Path).

-compile({nowarn_unused_function,v_msg_crdt_map_state/3}).
-dialyzer({nowarn_function,v_msg_crdt_map_state/3}).
v_msg_crdt_map_state(#{} = M, Path, TrUserData) ->
    case M of
      #{state := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_map_state(Elem, [state | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, map_state}}, F1,
			       [state | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (state) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_crdt_map_state(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   crdt_map_state},
		  M, Path);
v_msg_crdt_map_state(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, crdt_map_state}, X, Path).

-compile({nowarn_unused_function,v_msg_op/3}).
-dialyzer({nowarn_function,v_msg_op/3}).
v_msg_op(#{} = M, Path, TrUserData) ->
    case M of
      #{object := F1} ->
	  v_msg_crdt_key_type(F1, [object | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{update := F2} ->
	  v_msg_update(F2, [update | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (object) -> ok;
		      (update) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_op(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), op},
		  M, Path);
v_msg_op(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, op}, X, Path).

-compile({nowarn_unused_function,v_msg_operation/3}).
-dialyzer({nowarn_function,v_msg_operation/3}).
v_msg_operation(#{} = M, Path, TrUserData) ->
    case M of
      #{op := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_op(Elem, [op | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, op}}, F1,
			       [op | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (op) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_operation(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   operation},
		  M, Path);
v_msg_operation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, operation}, X, Path).

-compile({nowarn_unused_function,v_msg_crdt_key_type/3}).
-dialyzer({nowarn_function,v_msg_crdt_key_type/3}).
v_msg_crdt_key_type(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_string(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{type := F2} ->
	  v_type_string(F2, [type | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (type) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_crdt_key_type(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   crdt_key_type},
		  M, Path);
v_msg_crdt_key_type(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, crdt_key_type}, X, Path).

-compile({nowarn_unused_function,v_msg_crdt_value/3}).
-dialyzer({nowarn_function,v_msg_crdt_value/3}).
v_msg_crdt_value(#{} = M, Path, TrUserData) ->
    case M of
      #{val := {str, OF1}} ->
	  v_type_string(OF1, [str, val | Path], TrUserData);
      #{val := {int, OF1}} ->
	  v_type_int64(OF1, [int, val | Path], TrUserData);
      #{val := F1} ->
	  mk_type_error(invalid_oneof, F1, [val | Path]);
      _ -> ok
    end,
    lists:foreach(fun (val) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_crdt_value(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   crdt_value},
		  M, Path);
v_msg_crdt_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, crdt_value}, X, Path).

-compile({nowarn_unused_function,v_msg_update/3}).
-dialyzer({nowarn_function,v_msg_update/3}).
v_msg_update(#{} = M, Path, TrUserData) ->
    case M of
      #{op_type := F1} ->
	  v_type_string(F1, [op_type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_msg_crdt_value(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (op_type) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_update(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   update},
		  M, Path);
v_msg_update(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, update}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, sub_request},
      [#{name => timestamp, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, state_delta},
      [#{name => old, fnum => 1, rnum => 2,
	 type => {msg, crdt_map_state}, occurrence => optional,
	 opts => []},
       #{name => new, fnum => 2, rnum => 3,
	 type => {msg, crdt_map_state}, occurrence => optional,
	 opts => []}]},
     {{msg, payload},
      [#{name => val, rnum => 2,
	 fields =>
	     [#{name => delta, fnum => 1, rnum => 2,
		type => {msg, state_delta}, occurrence => optional,
		opts => []},
	      #{name => op, fnum => 2, rnum => 2,
		type => {msg, operation}, occurrence => optional,
		opts => []}]}]},
     {{msg, log_operation},
      [#{name => dc_ID, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => partition_ID, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => key, fnum => 3, rnum => 4, type => string,
	 occurrence => optional, opts => []},
       #{name => bucket, fnum => 4, rnum => 5, type => string,
	 occurrence => optional, opts => []},
       #{name => crdt_type, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []},
       #{name => commit_time, fnum => 6, rnum => 7,
	 type => int64, occurrence => optional, opts => []},
       #{name => payload, fnum => 7, rnum => 8,
	 type => {msg, payload}, occurrence => optional,
	 opts => []}]},
     {{msg, map_state},
      [#{name => object, fnum => 1, rnum => 2,
	 type => {msg, crdt_key_type}, occurrence => optional,
	 opts => []},
       #{name => value, fnum => 2, rnum => 3,
	 type => {msg, crdt_value}, occurrence => optional,
	 opts => []}]},
     {{msg, crdt_map_state},
      [#{name => state, fnum => 1, rnum => 2,
	 type => {msg, map_state}, occurrence => repeated,
	 opts => []}]},
     {{msg, op},
      [#{name => object, fnum => 1, rnum => 2,
	 type => {msg, crdt_key_type}, occurrence => optional,
	 opts => []},
       #{name => update, fnum => 2, rnum => 3,
	 type => {msg, update}, occurrence => optional,
	 opts => []}]},
     {{msg, operation},
      [#{name => op, fnum => 1, rnum => 2, type => {msg, op},
	 occurrence => repeated, opts => []}]},
     {{msg, crdt_key_type},
      [#{name => key, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => type, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, crdt_value},
      [#{name => val, rnum => 2,
	 fields =>
	     [#{name => str, fnum => 1, rnum => 2, type => string,
		occurrence => optional, opts => []},
	      #{name => int, fnum => 2, rnum => 2, type => int64,
		occurrence => optional, opts => []}]}]},
     {{msg, update},
      [#{name => op_type, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3,
	 type => {msg, crdt_value}, occurrence => optional,
	 opts => []}]}].


get_msg_names() ->
    [sub_request, state_delta, payload, log_operation,
     map_state, crdt_map_state, op, operation, crdt_key_type,
     crdt_value, update].


get_group_names() -> [].


get_msg_or_group_names() ->
    [sub_request, state_delta, payload, log_operation,
     map_state, crdt_map_state, op, operation, crdt_key_type,
     crdt_value, update].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(sub_request) ->
    [#{name => timestamp, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []}];
find_msg_def(state_delta) ->
    [#{name => old, fnum => 1, rnum => 2,
       type => {msg, crdt_map_state}, occurrence => optional,
       opts => []},
     #{name => new, fnum => 2, rnum => 3,
       type => {msg, crdt_map_state}, occurrence => optional,
       opts => []}];
find_msg_def(payload) ->
    [#{name => val, rnum => 2,
       fields =>
	   [#{name => delta, fnum => 1, rnum => 2,
	      type => {msg, state_delta}, occurrence => optional,
	      opts => []},
	    #{name => op, fnum => 2, rnum => 2,
	      type => {msg, operation}, occurrence => optional,
	      opts => []}]}];
find_msg_def(log_operation) ->
    [#{name => dc_ID, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => partition_ID, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => key, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => bucket, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []},
     #{name => crdt_type, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => commit_time, fnum => 6, rnum => 7,
       type => int64, occurrence => optional, opts => []},
     #{name => payload, fnum => 7, rnum => 8,
       type => {msg, payload}, occurrence => optional,
       opts => []}];
find_msg_def(map_state) ->
    [#{name => object, fnum => 1, rnum => 2,
       type => {msg, crdt_key_type}, occurrence => optional,
       opts => []},
     #{name => value, fnum => 2, rnum => 3,
       type => {msg, crdt_value}, occurrence => optional,
       opts => []}];
find_msg_def(crdt_map_state) ->
    [#{name => state, fnum => 1, rnum => 2,
       type => {msg, map_state}, occurrence => repeated,
       opts => []}];
find_msg_def(op) ->
    [#{name => object, fnum => 1, rnum => 2,
       type => {msg, crdt_key_type}, occurrence => optional,
       opts => []},
     #{name => update, fnum => 2, rnum => 3,
       type => {msg, update}, occurrence => optional,
       opts => []}];
find_msg_def(operation) ->
    [#{name => op, fnum => 1, rnum => 2, type => {msg, op},
       occurrence => repeated, opts => []}];
find_msg_def(crdt_key_type) ->
    [#{name => key, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => type, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(crdt_value) ->
    [#{name => val, rnum => 2,
       fields =>
	   [#{name => str, fnum => 1, rnum => 2, type => string,
	      occurrence => optional, opts => []},
	    #{name => int, fnum => 2, rnum => 2, type => int64,
	      occurrence => optional, opts => []}]}];
find_msg_def(update) ->
    [#{name => op_type, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3,
       type => {msg, crdt_value}, occurrence => optional,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['logpropagation.Service'].


get_service_def('logpropagation.Service') ->
    {{service, 'logpropagation.Service'},
     [#{name => 'WatchAsync', input => sub_request,
	output => log_operation, input_stream => false,
	output_stream => true, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('logpropagation.Service') ->
    ['WatchAsync'];
get_rpc_names(_) -> error.


find_rpc_def('logpropagation.Service', RpcName) ->
    'find_rpc_def_logpropagation.Service'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_logpropagation.Service'('WatchAsync') ->
    #{name => 'WatchAsync', input => sub_request,
      output => log_operation, input_stream => false,
      output_stream => true, opts => []};
'find_rpc_def_logpropagation.Service'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"logpropagation.Service">>) ->
    'logpropagation.Service';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('logpropagation.Service') ->
    <<"logpropagation.Service">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"logpropagation.Service">>, <<"WatchAsync">>) ->
    {'logpropagation.Service', 'WatchAsync'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('logpropagation.Service',
			       'WatchAsync') ->
    {<<"logpropagation.Service">>, <<"WatchAsync">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"logpropagation.SubRequest">>) -> sub_request;
fqbin_to_msg_name(<<"logpropagation.LogOperation.StateDelta">>) -> state_delta;
fqbin_to_msg_name(<<"logpropagation.LogOperation.Payload">>) -> payload;
fqbin_to_msg_name(<<"logpropagation.LogOperation">>) -> log_operation;
fqbin_to_msg_name(<<"logpropagation.CrdtMapState.MapState">>) -> map_state;
fqbin_to_msg_name(<<"logpropagation.CrdtMapState">>) -> crdt_map_state;
fqbin_to_msg_name(<<"logpropagation.Operation.Op">>) -> op;
fqbin_to_msg_name(<<"logpropagation.Operation">>) -> operation;
fqbin_to_msg_name(<<"logpropagation.CrdtKeyType">>) -> crdt_key_type;
fqbin_to_msg_name(<<"logpropagation.CrdtValue">>) -> crdt_value;
fqbin_to_msg_name(<<"logpropagation.Update">>) -> update;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(sub_request) -> <<"logpropagation.SubRequest">>;
msg_name_to_fqbin(state_delta) -> <<"logpropagation.LogOperation.StateDelta">>;
msg_name_to_fqbin(payload) -> <<"logpropagation.LogOperation.Payload">>;
msg_name_to_fqbin(log_operation) -> <<"logpropagation.LogOperation">>;
msg_name_to_fqbin(map_state) -> <<"logpropagation.CrdtMapState.MapState">>;
msg_name_to_fqbin(crdt_map_state) -> <<"logpropagation.CrdtMapState">>;
msg_name_to_fqbin(op) -> <<"logpropagation.Operation.Op">>;
msg_name_to_fqbin(operation) -> <<"logpropagation.Operation">>;
msg_name_to_fqbin(crdt_key_type) -> <<"logpropagation.CrdtKeyType">>;
msg_name_to_fqbin(crdt_value) -> <<"logpropagation.CrdtValue">>;
msg_name_to_fqbin(update) -> <<"logpropagation.Update">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> logpropagation.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "log_propagation.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["log_propagation.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["log_propagation"].


get_msg_containment("log_propagation") ->
    [crdt_key_type, crdt_map_state, map_state, crdt_value,
     log_operation, payload, state_delta, operation, op,
     sub_request, update];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("log_propagation") ->
    logpropagation;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("log_propagation") ->
    ['logpropagation.Service'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("log_propagation") ->
    [{'logpropagation.Service', 'WatchAsync'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("log_propagation") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"logpropagation.Operation.Op">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.LogOperation.StateDelta">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.SubRequest">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.LogOperation.Payload">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.Update">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.CrdtValue">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.CrdtMapState.MapState">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.CrdtMapState">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.CrdtKeyType">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.Operation">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(<<"logpropagation.LogOperation">>) ->
    "log_propagation";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"logpropagation.Service">>) ->
    "log_propagation";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"logpropagation">>) ->
    ["log_propagation"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4,7,3].
